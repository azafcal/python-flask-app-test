[project]
name = "python-flask-app-test"
version = "0.1.0"
description = "Flask Todo Application with Testing Suite"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "Flask==1.1.2",
    "Flask-SQLAlchemy==2.4.4",
    "gunicorn==19.9.0",
    "prometheus-client==0.17.1",
    "Click>=7.0,<9.0",
    "itsdangerous==1.1.0",
    "Jinja2==2.11.3",
    "MarkupSafe==1.1.1",
    "SQLAlchemy==1.3.22",
    "Werkzeug==1.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-flask>=1.2.0",
    "pytest-html>=3.1.0",
    "pytest-xdist>=3.0.0",  # for parallel test execution
    "coverage>=7.0.0",
    "black>=23.0.0",         # code formatting
    "flake8>=6.0.0",         # linting
    "isort>=5.12.0",         # import sorting
    "mypy>=1.0.0",           # type checking
    "factory-boy>=3.2.0",    # test data factories
    "faker>=18.0.0",         # fake data generation
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-flask>=1.2.0",
    "coverage>=7.0.0",
    "factory-boy>=3.2.0",
    "faker>=18.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/flask_todo_app"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-v --tb=short --strict-markers --disable-warnings"
markers = [
    "unit: marks tests as unit tests (fast)",
    "integration: marks tests as integration tests (slower)",
    "slow: marks tests as slow running tests",
    "api: marks tests as API tests",
    "database: marks tests that require database",
]
minversion = "6.0"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["."]  # Current directory
omit = [
    "tests/*",
    "venv/*",
    "*.pyc",
    ".coverage",
    "setup.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
show_missing = true
precision = 2

[tool.black]
line-length = 88
target-version = ["py39"]
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | migrations
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true
