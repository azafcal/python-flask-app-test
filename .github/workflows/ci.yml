name: Build Python Package and Publish

on:
  release:
    types: [ released ]

jobs:
  build_and_push_image_to_dockerhub:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.12' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"

      - name: Run Trivy vulnerability scanner on repository
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
          target: '.'
        continue-on-error: true 

      - name: Configure DockerHub credentials
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and tag Docker Image
        run: |
          LATEST_RELEASE_TAG=$(echo $GITHUB_REF_NAME | cut -d'v' -f2)
          docker build -t test-lab:$LATEST_RELEASE_TAG .
          docker tag mordor_v5:$LATEST_RELEASE_TAG ${{ secrets.DOCKER_USERNAME }}/test-lab:$LATEST_RELEASE_TAG

      - name: Run Trivy vulnerability scanner in Docker Image
        uses: aquasecurity/trivy-action@master 
        with:
          image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/test-lab:$LATEST_RELEASE_TAG'
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Push Docker Image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/lest-lab:${{ env.LATEST_RELEASE_TAG }}

      - name: Cleanup Docker credentials, image and cache
        run: |
          docker logout
          docker system prune -fa

      - name: Cleanup DockerHub credentials (if needed)
        run: |
          # Optionally remove DockerHub credentials (if using a token stored in Docker config file)
          rm ~/.docker/config.json || true
          make aws-cleanup
